{# Copyright 2020 Curtin University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Author: Richard Hosking #}

# Processing Output Types
CREATE TEMP FUNCTION count_single_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type STRING) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type = measured_type ) as total,
    COUNTIF(item.type = measured_type AND item.oa ) as oa,
    COUNTIF(item.type = measured_type AND item.green ) as green,
    COUNTIF(item.type = measured_type AND item.gold ) as gold,
    COUNTIF(item.type = measured_type AND item.gold_just_doaj ) as gold_just_doaj,
    COUNTIF(item.type = measured_type AND item.hybrid ) as hybrid,
    COUNTIF(item.type = measured_type AND item.bronze ) as bronze,
    COUNTIF(item.type = measured_type AND item.green_only ) as green_only,

  FROM UNNEST(items) as item)
);

CREATE TEMP FUNCTION count_array_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type ARRAY<STRING>) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type in UNNEST(measured_type) ) as total,
    COUNTIF(item.type in UNNEST(measured_type) AND item.oa ) as oa,
    COUNTIF(item.type in UNNEST(measured_type) AND item.green ) as green,
    COUNTIF(item.type in UNNEST(measured_type) AND item.gold ) as gold,
    COUNTIF(item.type in UNNEST(measured_type) AND item.gold_just_doaj ) as gold_just_doaj,
    COUNTIF(item.type in UNNEST(measured_type) AND item.hybrid ) as hybrid,
    COUNTIF(item.type in UNNEST(measured_type) AND item.bronze ) as bronze,
    COUNTIF(item.type in UNNEST(measured_type) AND item.green_only ) as green_only,

  FROM UNNEST(items) as item)
);

CREATE TEMP FUNCTION count_not_in_array_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type ARRAY<STRING>) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type not in UNNEST(measured_type) ) as total,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.oa ) as oa,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.green ) as green,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.gold ) as gold,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.gold_just_doaj ) as gold_just_doaj,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.hybrid ) as hybrid,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.bronze ) as bronze,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.green_only ) as green_only,
  FROM UNNEST(items) as item)
);

-- Count Output Types
CREATE TEMP FUNCTION count_output_types(items ARRAY<STRUCT<type STRING, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>) as (
    [
      count_single_output_type("journal_articles", items, 'journal-article'),
      count_array_output_type("book_sections", items, ['book-section', 'book-part', 'book-chapter']),
      count_array_output_type("authored_books", items, ['book', 'monograph']),
      count_single_output_type("edited_volumes", items, 'edited-book'),
      count_single_output_type("reports", items, 'report'),
      count_single_output_type("datasets", items, 'dataset'),
      count_single_output_type("proceedings_article", items, 'proceedings-article'),
      count_not_in_array_output_type("other_outputs", items, ['journal-article', 'book-section', 'book-part', 'book-chapter','book', 'monograph','edited-book', 'report', 'dataset', 'proceedings-article'])
    ]
);

-- Process Unpaywall Release
CREATE TEMP FUNCTION process_unpaywall_release(unpaywall_history ANY TYPE) as (
      ARRAY((
        SELECT as STRUCT
          unpaywall_release,
          COUNT(*) as total,
          COUNTIF(is_oa) as oa,
          COUNTIF(green) as green,
          COUNTIF(gold) as gold,
          COUNTIF(gold_just_doaj) as gold_just_doaj,
          COUNTIF(hybrid) as hybrid,
          COUNTIF(bronze) as bronze,
          COUNTIF(green_only) as green_only,

          count_output_types(ARRAY_AGG(STRUCT(output_type, is_oa, green, gold, gold_just_doaj, hybrid, bronze, green_only))) as output_types,
        FROM UNNEST(unpaywall_history) as unpaywall
        GROUP BY unpaywall.unpaywall_release
      ))
);

-- Compute Citation Analysis
CREATE TEMP FUNCTION compute_conditional_citations(items ARRAY<STRUCT<citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_x BOOL>>, positive_label STRING, negative_label STRING) as (
  ARRAY((
    SELECT as STRUCT
      CASE
        WHEN is_x THEN positive_label
        WHEN NOT is_x THEN negative_label
        END
      as label,
      is_x as status,
      COUNT(*) as articles,
      COUNTIF(citations.mag > 0 OR citations.crossref > 0 OR citations.open_citations > 0) as articles_with_citations,
      COUNTIF( (citations.mag IS NULL OR citations.mag = 0) AND (citations.crossref IS NULL OR citations.crossref = 0) AND (citations.open_citations IS NULL OR citations.open_citations = 0) ) as articles_without_citations,
      STRUCT(
        SUM(citations.mag) as mag,
        SUM(citations.crossref) as crosssref,
        SUM(citations.open_citations) as open_citations
      ) as citations,

    FROM UNNEST(items)
    GROUP BY is_x
  ))
);

CREATE TEMP FUNCTION compute_metrics(items ARRAY<STRUCT<doi STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>) as (
  (SELECT AS STRUCT
    -- Total outputs
    COUNT(doi) as total,

    -- Citation counts
    STRUCT(
      STRUCT(
        SUM(citations.mag) as total_citations,
        SAFE_DIVIDE( SUM(citations.mag) , COUNT(doi)) as citations_per_article,
        COUNTIF(citations.mag > 0) as articles_with_citations,
        COUNTIF(citations.mag is null) as articles_without_citations,
        SAFE_DIVIDE(SUM(citations.mag), COUNTIF(citations.mag > 0)) as citations_per_citated_article
      ) as mag,
      STRUCT(
        SUM(citations.crossref) as total_citations,
        SAFE_DIVIDE( SUM(citations.crossref) , COUNT(doi)) as citations_per_article,
        COUNTIF(citations.crossref > 0) as articles_with_citations,
        COUNTIF(citations.crossref is null) as articles_without_citations,
        SAFE_DIVIDE(SUM(citations.crossref), COUNTIF(citations.crossref > 0)) as citations_per_citated_article
      ) as crossref,
      STRUCT(
        SUM(citations.open_citations) as total_citations,
        SAFE_DIVIDE( SUM(citations.open_citations) , COUNT(doi)) as citations_per_article,
        COUNTIF(citations.open_citations > 0) as articles_with_citations,
        COUNTIF(citations.open_citations is null) as articles_without_citations,
        SAFE_DIVIDE(SUM(citations.open_citations), COUNTIF(citations.open_citations > 0)) as citations_per_citated_article
      ) as open_citations
    ) as citations,

    STRUCT(
      STRUCT(
        COUNTIF(is_oa = True) as count,
        SAFE_DIVIDE( (COUNTIF(is_oa is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, is_oa as is_x)), "Open Access", "Not Open Access") as citations
      ) as oa,

      STRUCT(
        COUNTIF(green = True) as count,
        SAFE_DIVIDE( (COUNTIF(green is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, green as is_x)), "Green", "Not Green") as citations
      ) as green,

      STRUCT(
        COUNTIF(gold = True) as count,
        SAFE_DIVIDE( (COUNTIF(gold is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, gold as is_x)), "Gold", "Not Gold") as citations
      ) as gold,

      STRUCT(
        COUNTIF(gold_just_doaj = True) as count,
        SAFE_DIVIDE( (COUNTIF(gold_just_doaj is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, gold_just_doaj as is_x)), "Gold just DOAJ", "Not Gold just DOAJ") as citations
      ) as gold_doaj,

      STRUCT(
        COUNTIF(hybrid) as count,
        SAFE_DIVIDE( (COUNTIF(hybrid is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, hybrid as is_x)), "Hybrid", "Not Hybrid") as citations
      ) as hybrid,

      STRUCT(
        COUNTIF(bronze) as count,
        SAFE_DIVIDE( (COUNTIF(bronze is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, bronze as is_x)), "Bronze", "Not Bronze") as citations
      ) as bronze,

      STRUCT(
        COUNTIF(green_only) as count,
        SAFE_DIVIDE( (COUNTIF(green_only is True)) * 100 , COUNT(doi)) as percent,
        compute_conditional_citations(ARRAY_AGG(STRUCT(citations, green_only as is_x)), "Green Only", "Not Green Only") as citations
      ) as green_only

      --STRUCT(
        --COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0) as count,
        --(COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0)) * 100 / COUNT(doi) as percent,
      --) as green_in_home_repo,

      --STRUCT(
        --COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0) as count,
        --SAFE_DIVIDE((COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0)) * 100, COUNTIF(unpaywall.green is True)) as percent_of_just_green_in_home_repo,
      --) as green_in_just_home_repo

    ) as open_access

  FROM UNNEST(items))
);

CREATE TEMP FUNCTION compute_disciplines(fields ARRAY<STRUCT<DisplayName STRING, Score FLOAT64, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_oa BOOL, green BOOL, gold BOOL, funding BOOL, international_funding BOOL, domestic_funding BOOL, government_funding BOOL, private_funding BOOL, international_colab BOOL>>) as (
  ARRAY(
    (SELECT AS STRUCT
        DisplayName as field,
        COUNT(DisplayName) as count,
        SUM(Score) as sum_of_scores,
        STRUCT(
          SUM(citations.mag) as mag,
          SUM(citations.crossref) as crosssref,
          SUM(citations.open_citations) as open_citations
        ) as citations,
        COUNTIF(is_oa = True) as oa,
        COUNTIF(green = True) as green,
        COUNTIF(gold = True) as gold,
        STRUCT(
          COUNTIF(funding) as count,
          COUNTIF(international_funding) as international,
          COUNTIF(domestic_funding) as domestic,
          COUNTIF(international_funding AND domestic_funding) as international_and_domestic,
          COUNTIF(government_funding) as government,
          COUNTIF(private_funding) as private,
          COUNTIF(government_funding AND private_funding) as government_and_private
        ) as funding,
        COUNTIF(international_colab) as international_collaboration,
        COUNTIF(international_colab AND international_funding) as international_collaboration_with_funding
    FROM UNNEST(fields)
    GROUP BY DisplayName)
  )
);

CREATE TEMP FUNCTION group_disciplines(fields ARRAY<STRUCT<DisplayName STRING, Score FLOAT64, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>>>) as (
  ARRAY(
    (SELECT AS STRUCT
      DisplayName as field,
      COUNT(DisplayName) as count,
      SUM(Score) as sum_of_scores,
      STRUCT(
          SUM(citations.mag) as mag,
          SUM(citations.crossref) as crosssref,
          SUM(citations.open_citations) as open_citations
        ) as citations,
    FROM UNNEST(fields)
    GROUP BY DisplayName)
  )
);

----
-- Main SQL Function
----

SELECT
  id,
  (SELECT DISTINCT type from UNNEST(types) as type) as types,
  name,
  country,
  country_code,
  region,
  subregion,
  coordinates,
  
  -- Time Period
  time_period,

  -- Metrics
  metrics,
  
  -- Output Types
  output_types,

  disciplines,

  -- Collaborators
  ARRAY(SELECT AS STRUCT
          collaborator.identifier as id,
          COUNT(collaborator.identifier) as count,
          MAX(collaborator.name) as name,
          MAX(collaborator.country) as country,
          MAX(collaborator.country_code) as country_code,
          MAX(collaborator.region) as region,
          MAX(collaborator.subregion) as subregion,
          MAX(collaborator.coordinates) as coordinates,
          COUNTIF(is_oa) as oa, COUNTIF(green) as green, COUNTIF(gold) as gold,
          STRUCT(SUM(citations.mag) as mag, SUM(citations.open_citations) as open_citations, SUM(citations.crossref) as crossref) as citations,
          group_disciplines(ARRAY_CONCAT_AGG(disciplines)) as disciplines
      FROM UNNEST(collaborations) as collaborator WHERE collaborator.identifier <> id GROUP BY collaborator.identifier ) as collaborations,

  -- Funders
  ARRAY((
  SELECT as STRUCT
    funder.identifier,
    MAX(funder.name) as name,
    MAX(funder.country) as country,
    MAX(funder.country_code) as country_code,
    MAX(funder.funding_body_type) as funding_body_type,
    MAX(funder.funding_body_subtype) as funding_body_subtype,
    COUNT(*) as count, COUNTIF(is_oa) as oa, COUNTIF(green) as green, COUNTIF(gold) as gold
  FROM UNNEST(funders) as funder
  GROUP BY funder.identifier
  ORDER BY count DESC
  LIMIT 1500
  )) as funders,

  -- Domestic vs International funders
  (SELECT as STRUCT
    COUNT(*) as count,
    COUNTIF(LOWER(funder.country_code) = LOWER(country_code_2)) as domentic,
    COUNTIF(LOWER(funder.country_code) != LOWER(country_code_2)) as international,
  FROM UNNEST(funders) as funder
  WHERE funder.identifier IS NOT NULL
  ) as funding_source,


  -- Publishers
  ARRAY((
  SELECT as STRUCT
    publisher,
    COUNT(*) as count, COUNTIF(is_oa) as oa, COUNTIF(green) as green, COUNTIF(gold) as gold
  FROM UNNEST(publishers)
  GROUP BY publisher
  ORDER BY count DESC
  LIMIT 1500
  )) as publishers,

  -- Journals
  ARRAY((
  SELECT as STRUCT
    journal,
    COUNT(*) as count, COUNTIF(is_oa) as oa, COUNTIF(green) as green, COUNTIF(gold) as gold
  FROM UNNEST(journals)
  GROUP BY journal
  ORDER BY count DESC
  LIMIT 3000
  )) as journals,

  -- Events / Altmetrics
  ARRAY((
  SELECT as STRUCT
    source,
    SUM(count) as count,
    SUM( IF(is_oa, count, 0) ) as oa, 
    SUM( IF(green, count, 0) ) as green, 
    SUM( IF(gold, count, 0) ) as gold
  FROM  UNNEST(events)
  GROUP BY source
  )) as events

  -- Diversity
  --NULL as diversity,

  -- Unpaywall History
  --process_unpaywall_release(unpaywall_history) as unpaywall_history
FROM(
  SELECT
    aggregrate.identifier as id,
    dois.crossref.{{ group_by_time_field }} as time_period,

    ARRAY_CONCAT_AGG(aggregrate.types) as types,
    MAX(aggregrate.name) as name,
    ARRAY_CONCAT_AGG(aggregrate.home_repo) as home_repo,
    MAX(aggregrate.country) as country,
    MAX(aggregrate.country_code) as country_code,
    MAX(aggregrate.country_code_2) as country_code_2,
    MAX(aggregrate.region) as region,
    MAX(aggregrate.subregion) as subregion,
    MAX(aggregrate.coordinates) as coordinates,

    -- Computed Metrics
    compute_metrics(ARRAY_AGG(STRUCT(dois.doi, STRUCT(dois.microsoft_academic_graph.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa, unpaywall.green, unpaywall.gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only))) as metrics,

    -- Collaboration Analysis
    ARRAY_CONCAT_AGG( 
      ARRAY(
        (SELECT as STRUCT 
          collab.*, 
          unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold,
          STRUCT(
              dois.microsoft_academic_graph.CitationCount as mag,
              dois.crossref.references_count as crossref,
              dois.open_citations.citations_total as open_citations
            ) as citations,
          ARRAY(
            SELECT as STRUCT
              DisplayName,
              Score,
              STRUCT(
                dois.microsoft_academic_graph.CitationCount as mag,
                dois.crossref.references_count as crossref,
                dois.open_citations.citations_total as open_citations
              ) as citations,
            FROM UNNEST(dois.microsoft_academic_graph.fields.fields.level_0)) as disciplines
        FROM UNNEST(affiliations.{{ aggregation_field }}) as collab) 
      )
    ) as collaborations,

    -- Output Types
    count_output_types(ARRAY_AGG(STRUCT(unpaywall.output_type, unpaywall.is_oa, unpaywall.green, unpaywall.gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only))) as output_types,

    -- Discipline
    STRUCT(
      compute_disciplines( ARRAY_CONCAT_AGG( ARRAY(
        (SELECT AS STRUCT
            fields.DisplayName, fields.Score,
            STRUCT(
              dois.microsoft_academic_graph.CitationCount as mag,
              dois.crossref.references_count as crossref,
              dois.open_citations.citations_total as open_citations
            ) as citations,
            unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold,

            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder) as funding,
            -- Domestic, international, both, none or unknown funding
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.country_code <> aggregrate.country_code_2) as international_funding,
            (SELECT COUNT(funder) > 1 from UNNEST(affiliations.funders) as funder WHERE funder.country_code = aggregrate.country_code_2) as domestic_funding,
            -- has Industry or Government or both funding
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.funding_body_subtype = 'gov') as government_funding,
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.funding_body_subtype = 'pri') as private_funding,

            -- Domestic collaboration only or international collaboration or single institution only
            (SELECT COUNT(collab) > 0 FROM UNNEST(affiliations.countries) as collab WHERE collab.country <> aggregrate.country) as international_collab

          FROM UNNEST(dois.microsoft_academic_graph.fields.fields.level_0) as fields)) )) as level0
    ) as disciplines,

    -- Events
    ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT event.source, event.count, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold from UNNEST(dois.events.events) as event))) as events,

    -- Funders
    ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT funder.identifier, funder.name, funder.country, funder.country_code, funder.funding_body_type, funder.funding_body_subtype, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold from UNNEST(affiliations.funders) as funder))) as funders,

    -- Publishers
    ARRAY_AGG(STRUCT(crossref.publisher as publisher, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold)) as publishers,

    -- Journals
    ARRAY_AGG(STRUCT(unpaywall.journal_name as journal, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold)) as journals,

    -- Unpaywall History
    --ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT unpaywall.*from UNNEST(dois.unpaywall_history) as unpaywall))) as unpaywall_history

  FROM `{{ project_id }}.observatory.doi{{ release_date.strftime('%Y%m%d') }}` as dois, UNNEST(dois.affiliations.{{ aggregation_field }}) as aggregrate
  WHERE aggregrate.identifier IS NOT NULL
  GROUP BY aggregrate.identifier, crossref.{{ group_by_time_field }})
