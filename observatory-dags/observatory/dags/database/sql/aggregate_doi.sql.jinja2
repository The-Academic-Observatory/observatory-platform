{# Copyright 2020 Curtin University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Author: Richard Hosking #}

# Processing Output Types
CREATE TEMP FUNCTION compute_percentiles(counts ARRAY<INT64>) AS (
  (SELECT as STRUCT
    ROUND(PERCENTILE_CONT(count, 0.25) OVER(), 2) as per_25th,
    ROUND(PERCENTILE_CONT(count, 0.50) OVER(), 2) as median,
    ROUND(PERCENTILE_CONT(count, 0.90) OVER(), 2) as per_90th,
    ROUND(PERCENTILE_CONT(count, 0.95) OVER(), 2) as per_95th
  FROM UNNEST(counts) as count LIMIT 1)
);

CREATE TEMP FUNCTION count_single_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type STRING) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type = measured_type ) as total_outputs,
    COUNTIF(item.type = measured_type AND item.oa ) as num_oa_outputs,
    COUNTIF(item.type = measured_type AND item.green ) as num_green_outputs,
    COUNTIF(item.type = measured_type AND item.gold ) as num_gold_outputs,
    COUNTIF(item.type = measured_type AND item.gold_just_doaj ) as num_gold_just_doaj_outputs,
    COUNTIF(item.type = measured_type AND item.hybrid ) as num_hybrid_outputs,
    COUNTIF(item.type = measured_type AND item.bronze ) as num_bronze_outputs,
    COUNTIF(item.type = measured_type AND item.green_only ) as num_green_only_outputs,
    STRUCT(
      SUM(citations.mag) as total_mag_citations,
      SUM(citations.open_citations) as total_open_citations_citations,
      SUM(citations.crossref) as total_crossref_citations
    ) as citations
  FROM UNNEST(items) as item)
);

CREATE TEMP FUNCTION count_array_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type ARRAY<STRING>) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type in UNNEST(measured_type) ) as total_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.oa ) as num_oa_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.green ) as num_green_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.gold ) as num_gold_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.gold_just_doaj ) as num_gold_just_doaj_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.hybrid ) as num_hybrid_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.bronze ) as num_bronze_outputs,
    COUNTIF(item.type in UNNEST(measured_type) AND item.green_only ) as num_green_only_outputs,
    STRUCT(
      SUM(citations.mag) as total_mag_citations,
      SUM(citations.open_citations) as total_open_citations_citations,
      SUM(citations.crossref) as total_crossref_citations
    ) as citations

  FROM UNNEST(items) as item)
);

CREATE TEMP FUNCTION count_not_in_array_output_type(output_type STRING, items ARRAY<STRUCT<type STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>, measured_type ARRAY<STRING>) AS (
  (SELECT as STRUCT
    output_type,
    COUNTIF(item.type not in UNNEST(measured_type) ) as total_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.oa ) as num_oa_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.green ) as num_green_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.gold ) as num_gold_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.gold_just_doaj ) as num_gold_just_doaj_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.hybrid ) as num_hybrid_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.bronze ) as num_bronze_outputs,
    COUNTIF(item.type not in UNNEST(measured_type) AND item.green_only ) as num_green_only_outputs,
    STRUCT(
      SUM(citations.mag) as total_mag_citations,
      SUM(citations.open_citations) as total_open_citations_citations,
      SUM(citations.crossref) as total_crossref_citations
    ) as citations
  FROM UNNEST(items) as item)
);

-- Count Output Types
CREATE TEMP FUNCTION count_output_types(items ARRAY<STRUCT<type STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>) as (
    [
      count_single_output_type("journal_articles", items, 'journal-article'),
      count_array_output_type("book_sections", items, ['book-section', 'book-part', 'book-chapter']),
      count_array_output_type("authored_books", items, ['book', 'monograph']),
      count_single_output_type("edited_volumes", items, 'edited-book'),
      count_single_output_type("reports", items, 'report'),
      count_single_output_type("datasets", items, 'dataset'),
      count_single_output_type("proceedings_article", items, 'proceedings-article'),
      count_not_in_array_output_type("other_outputs", items, ['journal-article', 'book-section', 'book-part', 'book-chapter','book', 'monograph','edited-book', 'report', 'dataset', 'proceedings-article'])
    ]
);

-- Process Unpaywall Release
CREATE TEMP FUNCTION process_unpaywall_release(unpaywall_history ANY TYPE) as (
      ARRAY((
        SELECT as STRUCT
          unpaywall_release,
          COUNT(*) as total_outputs,
          COUNTIF(is_oa) as num_oa_outputs,
          COUNTIF(green) as num_green_outputs,
          COUNTIF(gold) as num_gold_outputs,
          COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs,
          COUNTIF(hybrid) as num_hybrid_outputs,
          COUNTIF(bronze) as num_bronze_outputs,
          COUNTIF(green_only) as num_green_only_outputs,

          --count_output_types(ARRAY_AGG(STRUCT(output_type, is_oa, green, gold, gold_just_doaj, hybrid, bronze, green_only))) as output_types,
        FROM UNNEST(unpaywall_history) as unpaywall
        GROUP BY unpaywall.unpaywall_release
      ))
);

-- Compute Citation Analysis
CREATE TEMP FUNCTION compute_conditional_citations(items ARRAY<STRUCT<citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_x BOOL>>, access_type STRING, positive_label STRING, negative_label STRING) as (
  ARRAY((
    SELECT as STRUCT
      CASE
        WHEN is_x THEN positive_label
        WHEN NOT is_x THEN negative_label
        END
      as label,
      access_type,
      is_x as status,
      COUNT(*) as total_outputs,
      COUNTIF(citations.mag > 0 OR citations.crossref > 0 OR citations.open_citations > 0) as outputs_with_citations,
      COUNTIF( (citations.mag IS NULL OR citations.mag = 0) AND (citations.crossref IS NULL OR citations.crossref = 0) AND (citations.open_citations IS NULL OR citations.open_citations = 0) ) as outputs_without_citations,
      STRUCT(
        STRUCT(
          SUM(citations.mag) as total_citations,
          compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
        ) as mag,
        STRUCT(
          SUM(citations.open_citations) as total_citations,
          compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
        ) as open_citations, 
        STRUCT(
          SUM(citations.crossref) as total_citations,
          compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
        ) as crossref
      ) as citations,

    FROM UNNEST(items)
    GROUP BY is_x
  ))
);

CREATE TEMP FUNCTION compute_citations(items ARRAY<STRUCT<doi STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>>>) as (
  (SELECT AS STRUCT
    -- Citation counts
    STRUCT(
      SUM(citations.mag) as total_citations,
      ROUND(SAFE_DIVIDE( SUM(citations.mag) , COUNT(doi)), 2) as citations_per_output,
      COUNTIF(citations.mag > 0) as outputs_with_citations,
      COUNTIF(citations.mag is null) as outputs_without_citations,
      ROUND(SAFE_DIVIDE(SUM(citations.mag), COUNTIF(citations.mag > 0)), 2) as citations_per_cited_output
    ) as mag,
    STRUCT(
      SUM(citations.crossref) as total_citations,
      ROUND(SAFE_DIVIDE( SUM(citations.crossref) , COUNT(doi)), 2) as citations_per_output,
      COUNTIF(citations.crossref > 0) as outputs_with_citations,
      COUNTIF(citations.crossref is null) as outputs_without_citations,
      ROUND(SAFE_DIVIDE(SUM(citations.crossref), COUNTIF(citations.crossref > 0)), 2) as citations_per_cited_output
    ) as crossref,
    STRUCT(
      SUM(citations.open_citations) as total_citations,
      ROUND(SAFE_DIVIDE( SUM(citations.open_citations) , COUNT(doi)), 2) as citations_per_output,
      COUNTIF(citations.open_citations > 0) as output_with_citations,
      COUNTIF(citations.open_citations is null) as outputs_without_citations,
      ROUND(SAFE_DIVIDE(SUM(citations.open_citations), COUNTIF(citations.open_citations > 0)), 2) as citations_per_cited_output
    ) as open_citations
  FROM UNNEST(items))
);

CREATE TEMP FUNCTION compute_access_types(items ARRAY<STRUCT<doi STRING, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL>>) as (
  (SELECT AS STRUCT
    STRUCT(
      COUNTIF(is_oa = True) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(is_oa is True)) * 100 , COUNT(doi)), 2) as percent
    ) as oa,

    STRUCT(
      COUNTIF(green = True) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(green is True)) * 100 , COUNT(doi)), 2) as percent
    ) as green,

    STRUCT(
      COUNTIF(gold = True) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(gold is True)) * 100 , COUNT(doi)), 2) as percent
    ) as gold,

    STRUCT(
      COUNTIF(gold_just_doaj = True) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(gold_just_doaj is True)) * 100 , COUNT(doi)), 2) as percent
    ) as gold_doaj,

    STRUCT(
      COUNTIF(hybrid) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(hybrid is True)) * 100 , COUNT(doi)), 2) as percent
    ) as hybrid,

    STRUCT(
      COUNTIF(bronze) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(bronze is True)) * 100 , COUNT(doi)), 2) as percent
    ) as bronze,

    STRUCT(
      COUNTIF(green_only) as total_outputs,
      ROUND(SAFE_DIVIDE( (COUNTIF(green_only is True)) * 100 , COUNT(doi)), 2) as percent
    ) as green_only,

    --STRUCT(
      --COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0) as total_outputs,
      --ROUND((COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0)) * 100 / COUNT(doi), 2) as percent,
    --) as green_in_home_repo,

    --STRUCT(
      --COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0) as total_outputs,
      --ROUND(SAFE_DIVIDE((COUNTIF(STRPOS(ARRAY_TO_STRING(repository_locations, '--'), grids.home_repo) > 0)) * 100, COUNTIF(unpaywall.green is True)), 2) as percent_of_just_green_in_home_repo,
    --) as green_in_just_home_repo,

    ARRAY_CONCAT(
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(is_oa, false) as is_x)), "oa", "Open Access", "Not Open Access"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(green, false) as is_x)), "green", "Green", "Not Green"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(gold, false) as is_x)), "gold", "Gold", "Not Gold"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(gold_just_doaj, false) as is_x)), "gold_just_doaj", "Gold just DOAJ", "Not Gold just DOAJ"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(hybrid, false) as is_x)), "hybrid", "Hybrid", "Not Hybrid"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(bronze, false) as is_x)), "bronze", "Bronze", "Not Bronze"),
      compute_conditional_citations(ARRAY_AGG(STRUCT(citations, IFNULL(green_only, false) as is_x)), "green_only", "Green Only", "Not Green Only")
    ) as breakdown

  FROM UNNEST(items))
);


CREATE TEMP FUNCTION compute_disciplines(fields ARRAY<STRUCT<DisplayName STRING, Score FLOAT64, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>, is_oa BOOL, green BOOL, gold BOOL, gold_just_doaj BOOL, hybrid BOOL, bronze BOOL, green_only BOOL, funding BOOL, international_funding BOOL, domestic_funding BOOL, government_funding BOOL, private_funding BOOL, international_colab BOOL>>) as (
  ARRAY(
    (SELECT AS STRUCT
        DisplayName as field,
        COUNT(DisplayName) as total_outputs,
        SUM(Score) as sum_of_scores,
        STRUCT(
          STRUCT(
            SUM(citations.mag) as total_citations,
            compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
          ) as mag,
          STRUCT(
            SUM(citations.open_citations) as total_citations,
            compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
          ) as open_citations, 
          STRUCT(
            SUM(citations.crossref) as total_citations,
            compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
          ) as crossref
        ) as citations,
        COUNTIF(is_oa) as num_oa_outputs, 
        COUNTIF(green) as num_green_outputs, 
        COUNTIF(gold) as num_gold_outputs, 
        COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
        COUNTIF(hybrid) as num_hybrid_outputs, 
        COUNTIF(bronze) as num_bronze_outputs, 
        COUNTIF(green_only) as num_green_only_outputs,
        STRUCT(
          COUNTIF(funding) as total_funded_outputs,
          COUNTIF(international_funding) as num_international_outputs,
          COUNTIF(domestic_funding) as num_domestic_outputs,
          COUNTIF(international_funding AND domestic_funding) as num_international_and_domestic_outputs,
          COUNTIF(government_funding) as num_government_outputs,
          COUNTIF(private_funding) as num_private_outputs,
          COUNTIF(government_funding AND private_funding) as num_government_and_private_outputs
        ) as funding,
        COUNTIF(international_colab) as num_international_collaboration_outputs,
        COUNTIF(international_colab AND international_funding) as international_collaboration_with_funding_outputs
    FROM UNNEST(fields)
    GROUP BY DisplayName)
  )
);

CREATE TEMP FUNCTION group_disciplines(fields ARRAY<STRUCT<DisplayName STRING, Score FLOAT64, citations STRUCT<mag INT64, crossref INT64, open_citations INT64>>>) as (
  ARRAY(
    (SELECT AS STRUCT
      DisplayName as field,
      COUNT(DisplayName) as total_outputs,
      SUM(Score) as sum_of_scores,
      STRUCT(
          SUM(citations.mag) as mag,
          SUM(citations.crossref) as crosssref,
          SUM(citations.open_citations) as open_citations
        ) as citations,
    FROM UNNEST(fields)
    GROUP BY DisplayName)
  )
);

----
-- Main SQL Function
----

SELECT
  id,
  (SELECT DISTINCT type from UNNEST(types) as type) as types,
  name,
  country,
  country_code,
  region,
  subregion,
  coordinates,
  
  -- Time Period
  time_period,

  -- Total Outputs
  total_outputs,

  -- Output Types
  output_types,

  -- Citations
  citations,

  -- Access Types
  access_types,
  
  -- Disciplines
  disciplines,

  -- Collaborators
  ARRAY(SELECT AS STRUCT
          collaborator.identifier as id,
          COUNT(collaborator.identifier) as total_outputs,
          MAX(collaborator.name) as name,
          MAX(collaborator.country) as country,
          MAX(collaborator.country_code) as country_code,
          MAX(collaborator.region) as region,
          MAX(collaborator.subregion) as subregion,
          MAX(collaborator.coordinates) as coordinates,
          COUNTIF(is_oa) as num_oa_outputs, 
          COUNTIF(green) as num_green_outputs, 
          COUNTIF(gold) as num_gold_outputs, 
          COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
          COUNTIF(hybrid) as num_hybrid_outputs, 
          COUNTIF(bronze) as num_bronze_outputs, 
          COUNTIF(green_only) as num_green_only_outputs,
          STRUCT(
            STRUCT(
              SUM(citations.mag) as total_citations,
              compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
            ) as mag,
            STRUCT(
              SUM(citations.open_citations) as total_citations,
              compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
            ) as open_citations, 
            STRUCT(
              SUM(citations.crossref) as total_citations,
              compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
            ) as crossref
          ) as citations,
          group_disciplines(ARRAY_CONCAT_AGG(disciplines)) as disciplines
      FROM UNNEST(collaborations) as collaborator WHERE collaborator.identifier <> id GROUP BY collaborator.identifier ) as collaborations,

  -- Members
  ARRAY((
  SELECT as STRUCT
    member,
    COUNT(*) as total_outputs, 
    COUNTIF(is_oa) as num_oa_outputs, 
    COUNTIF(green) as num_green_outputs, 
    COUNTIF(gold) as num_gold_outputs, 
    COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
    COUNTIF(hybrid) as num_hybrid_outputs, 
    COUNTIF(bronze) as num_bronze_outputs, 
    COUNTIF(green_only) as num_green_only_outputs,
    STRUCT(
      STRUCT(
        SUM(citations.mag) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
      ) as mag,
      STRUCT(
        SUM(citations.open_citations) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
      ) as open_citations, 
      STRUCT(
        SUM(citations.crossref) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
      ) as crossref
    ) as citations
  FROM  UNNEST(members)
  GROUP BY member
  )) as members,

  -- Funders
  ARRAY((
  SELECT as STRUCT
    funder.identifier,
    MAX(funder.name) as name,
    MAX(funder.country) as country,
    MAX(funder.country_code) as country_code,
    MAX(funder.funding_body_type) as funding_body_type,
    MAX(funder.funding_body_subtype) as funding_body_subtype,
    COUNT(*) as total_outputs, 
    COUNTIF(is_oa) as num_oa_outputs, 
    COUNTIF(green) as num_green_outputs, 
    COUNTIF(gold) as num_gold_outputs, 
    COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
    COUNTIF(hybrid) as num_hybrid_outputs, 
    COUNTIF(bronze) as num_bronze_outputs, 
    COUNTIF(green_only) as num_green_only_outputs,
    STRUCT(
      STRUCT(
        SUM(citations.mag) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
      ) as mag,
      STRUCT(
        SUM(citations.open_citations) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
      ) as open_citations, 
      STRUCT(
        SUM(citations.crossref) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
      ) as crossref
    ) as citations
  FROM UNNEST(funders) as funder
  GROUP BY funder.identifier
  ORDER BY total_outputs DESC
  LIMIT 1500
  )) as funders,

  -- Domestic vs International funders
  (SELECT as STRUCT
    COUNT(*) as total_outputs,
    COUNTIF(LOWER(funder.country_code) = LOWER(country_code_2)) as domentic,
    COUNTIF(LOWER(funder.country_code) != LOWER(country_code_2)) as international,
  FROM UNNEST(funders) as funder
  WHERE funder.identifier IS NOT NULL
  ) as funding_source,


  -- Publishers
  ARRAY((
  SELECT as STRUCT
    publisher,
    COUNT(*) as total_outputs, 
    COUNTIF(is_oa) as num_oa_outputs, 
    COUNTIF(green) as num_green_outputs, 
    COUNTIF(gold) as num_gold_outputs, 
    COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
    COUNTIF(hybrid) as num_hybrid_outputs, 
    COUNTIF(bronze) as num_bronze_outputs, 
    COUNTIF(green_only) as num_green_only_outputs,
    STRUCT(
      STRUCT(
        SUM(citations.mag) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
      ) as mag,
      STRUCT(
        SUM(citations.open_citations) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
      ) as open_citations, 
      STRUCT(
        SUM(citations.crossref) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
      ) as crossref
    ) as citations
  FROM UNNEST(publishers)
  GROUP BY publisher
  ORDER BY total_outputs DESC
  LIMIT 1000
  )) as publishers,

  -- Journals
  ARRAY((
  SELECT as STRUCT
    journal,
    COUNT(*) as total_outputs, 
    COUNTIF(is_oa) as num_oa_outputs, 
    COUNTIF(green) as num_green_outputs, 
    COUNTIF(gold) as num_gold_outputs, 
    COUNTIF(gold_just_doaj) as num_gold_just_doaj_outputs, 
    COUNTIF(hybrid) as num_hybrid_outputs, 
    COUNTIF(bronze) as num_bronze_outputs, 
    COUNTIF(green_only) as num_green_only_outputs,
    STRUCT(
      STRUCT(
        SUM(citations.mag) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.mag)) as percentiles
      ) as mag,
      STRUCT(
        SUM(citations.open_citations) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.open_citations)) as percentiles
      ) as open_citations, 
      STRUCT(
        SUM(citations.crossref) as total_citations,
        compute_percentiles(ARRAY_AGG(citations.crossref)) as percentiles
      ) as crossref
    ) as citations
  FROM UNNEST(journals)
  GROUP BY journal
  ORDER BY total_outputs DESC
  LIMIT 2000
  )) as journals,

  -- Events / Altmetrics
  ARRAY((
  SELECT as STRUCT
    source,
    SUM(count) as total_outputs,
    SUM( IF(is_oa, count, 0) ) as num_oa_outputs, 
    SUM( IF(green, count, 0) ) as num_green_outputs, 
    SUM( IF(gold, count, 0) ) as num_gold_outputs,
    SUM( IF(gold_just_doaj, count, 0) ) as num_gold_just_doaj_outputs,
    SUM( IF(hybrid, count, 0) ) as num_hybrid_outputs,
    SUM( IF(bronze, count, 0) ) as num_bronze_outputs,
    SUM( IF(green_only, count, 0) ) as num_green_only_outputs
  FROM  UNNEST(events)
  GROUP BY source
  )) as events

  -- Diversity
  --NULL as diversity,

  -- Unpaywall History
  --process_unpaywall_release(unpaywall_history) as unpaywall_history
FROM(
  SELECT
    aggregrate.identifier as id,
    dois.crossref.{{ group_by_time_field }} as time_period,

    ARRAY_CONCAT_AGG(aggregrate.types) as types,
    MAX(aggregrate.name) as name,
    ARRAY_CONCAT_AGG(aggregrate.home_repo) as home_repo,
    MAX(aggregrate.country) as country,
    MAX(aggregrate.country_code) as country_code,
    MAX(aggregrate.country_code_2) as country_code_2,
    MAX(aggregrate.region) as region,
    MAX(aggregrate.subregion) as subregion,
    MAX(aggregrate.coordinates) as coordinates,

    -- Total outputs
    COUNT(dois.doi) as total_outputs,

    -- Access Types
    compute_access_types(ARRAY_AGG(STRUCT(dois.doi, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa, unpaywall.green, unpaywall.gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only))) as access_types,
    
    -- Citations
    compute_citations(ARRAY_AGG(STRUCT(dois.doi, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations))) as citations,

    -- Collaboration Analysis
    ARRAY_CONCAT_AGG( 
      ARRAY(
        (SELECT as STRUCT 
          collab.*, 
          unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only,
          STRUCT(
              dois.mag.CitationCount as mag,
              dois.crossref.references_count as crossref,
              dois.open_citations.citations_total as open_citations
            ) as citations,
          ARRAY(
            SELECT as STRUCT
              DisplayName,
              Score,
              STRUCT(
                dois.mag.CitationCount as mag,
                dois.crossref.references_count as crossref,
                dois.open_citations.citations_total as open_citations
              ) as citations,
            FROM UNNEST(dois.mag.fields.fields.level_0)) as disciplines
        FROM UNNEST(affiliations.{{ aggregation_field }}) as collab) 
      )
    ) as collaborations,

    -- Members
    ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT member, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only from UNNEST(aggregrate.members) as member))) as members,

    -- Output Types
    count_output_types(ARRAY_AGG(STRUCT(unpaywall.output_type, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa, unpaywall.green, unpaywall.gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only))) as output_types,

    -- Discipline
    STRUCT(
      compute_disciplines( ARRAY_CONCAT_AGG( ARRAY(
        (SELECT AS STRUCT
            fields.DisplayName, fields.Score,
            STRUCT(
              dois.mag.CitationCount as mag,
              dois.crossref.references_count as crossref,
              dois.open_citations.citations_total as open_citations
            ) as citations,
            unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only,

            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder) as funding,
            -- Domestic, international, both, none or unknown funding
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.country_code <> aggregrate.country_code_2) as international_funding,
            (SELECT COUNT(funder) > 1 from UNNEST(affiliations.funders) as funder WHERE funder.country_code = aggregrate.country_code_2) as domestic_funding,
            -- has Industry or Government or both funding
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.funding_body_subtype = 'gov') as government_funding,
            (SELECT COUNT(funder) > 0 from UNNEST(affiliations.funders) as funder WHERE funder.funding_body_subtype = 'pri') as private_funding,

            -- Domestic collaboration only or international collaboration or single institution only
            (SELECT COUNT(collab) > 0 FROM UNNEST(affiliations.countries) as collab WHERE collab.country <> aggregrate.country) as international_collab

          FROM UNNEST(dois.mag.fields.fields.level_0) as fields)) )) as level0
    ) as disciplines,

    -- Events
    ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT event.source, event.count, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only from UNNEST(dois.events.events) as event))) as events,

    -- Funders
    ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT funder.identifier, funder.name, funder.country, funder.country_code, funder.funding_body_type, funder.funding_body_subtype, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only from UNNEST(affiliations.funders) as funder))) as funders,

    -- Publishers
    ARRAY_AGG(STRUCT(crossref.publisher as publisher, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only)) as publishers,

    -- Journals
    ARRAY_AGG(STRUCT(unpaywall.journal_name as journal, STRUCT(dois.mag.CitationCount as mag, dois.crossref.references_count as crossref, dois.open_citations.citations_total as open_citations) as citations, unpaywall.is_oa as is_oa, unpaywall.green as green, unpaywall.gold as gold, unpaywall.gold_just_doaj, unpaywall.hybrid, unpaywall.bronze, unpaywall.green_only)) as journals,

    -- Unpaywall History
    --ARRAY_CONCAT_AGG( ARRAY((SELECT AS STRUCT unpaywall.*from UNNEST(dois.unpaywall_history) as unpaywall))) as unpaywall_history

  FROM `{{ project_id }}.observatory.doi{{ release_date.strftime('%Y%m%d') }}` as dois, UNNEST(dois.affiliations.{{ aggregation_field }}) as aggregrate
  WHERE aggregrate.identifier IS NOT NULL
  GROUP BY aggregrate.identifier, crossref.{{ group_by_time_field }})
