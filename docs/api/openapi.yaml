swagger: '2.0'
info:
  title: Observatory API
  description: |
    The REST API for managing and accessing data from the Observatory Platform.
  version: 1.0.0
  contact:
    email: agent@observatory.academy
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html


schemes:
  - https
produces:
  - application/json
securityDefinitions:
  # This section configures basic authentication with an API key.
  api_key:
    type: "apiKey"
    name: "key"
    in: "query"
security:
  - api_key: []


host: api.observatory.academy


tags:
- name: Observatory
  description: the Observatory API



paths:
  /v1/workflow_type:
    get:
      tags:
      - Observatory
      summary: get a WorkflowType
      operationId: get_workflow_type
      description: |
        Get the details of a WorkflowType by passing it's id or type_id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: WorkflowType id
        required: false
        type: integer
      - in: query
        name: type_id
        description: WorkflowType type_id
        required: false
        type: string
      responses:
        200:
          description: the fetched WorkflowType
          schema:
            $ref: '#/definitions/WorkflowType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a WorkflowType
      operationId: post_workflow_type
      description: |
        Create a WorkflowType by passing a WorkflowType object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: WorkflowType to create
        required: true
        schema:
          $ref: '#/definitions/WorkflowType'
      responses:
        201:
          description: WorkflowType created, returning the created object with an id
          schema:
            $ref: '#/definitions/WorkflowType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
      - Observatory
      summary: create or update a WorkflowType
      operationId: put_workflow_type
      description: |
        Create a WorkflowType by passing a WorkflowType object, without an id. Update an existing WorkflowType by
        passing a WorkflowType object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: WorkflowType to create or update
        required: true
        schema:
          $ref: '#/definitions/WorkflowType'
      responses:
        200:
          description: WorkflowType updated
          schema:
            $ref: '#/definitions/WorkflowType'
        201:
          description: WorkflowType created, returning the created object with an id
          schema:
            $ref: '#/definitions/WorkflowType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
      - Observatory
      summary: delete a WorkflowType
      operationId: delete_workflow_type
      description: |
        Delete a WorkflowType by passing it's id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: WorkflowType id
        required: true
        type: integer
      responses:
        200:
          description: WorkflowType deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/workflow_types:
    get:
      tags:
      - Observatory
      summary: Get a list of WorkflowType objects
      operationId: get_workflow_types
      description: |
        Get a list of WorkflowType objects
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      responses:
        200:
          description: a list of WorkflowType objects
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkflowType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/workflow:
    get:
      tags:
      - Observatory
      summary: get a Workflow
      operationId: get_workflow
      description: |
        Get the details of a Workflow by passing it's id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: Workflow id
        required: true
        type: integer
      responses:
        200:
          description: the fetched Workflow
          schema:
            $ref: '#/definitions/Workflow'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a Workflow
      operationId: post_workflow
      description: |
        Create a Workflow by passing a Workflow object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Workflow to create
        required: true
        schema:
          $ref: '#/definitions/Workflow'
      responses:
        201:
          description: Workflow created, returning the created object with an id
          schema:
            $ref: '#/definitions/Workflow'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
      - Observatory
      summary: create or update a Workflow
      operationId: put_workflow
      description: |
        Create a Workflow by passing a Workflow object, without an id. Update an existing Workflow by
        passing a Workflow object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Workflow to create or update
        required: true
        schema:
          $ref: '#/definitions/Workflow'
      responses:
        200:
          description: Workflow updated
          schema:
            $ref: '#/definitions/Workflow'
        201:
          description: Workflow created, returning the created object with an id
          schema:
            $ref: '#/definitions/Workflow'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
      - Observatory
      summary: delete a Workflow
      operationId: delete_workflow
      description: |
        Delete a Workflow by passing it's id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: Workflow id
        required: true
        type: integer
      responses:
        200:
          description: Workflow deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/workflows:
    get:
      tags:
      - Observatory
      summary: Get a list of Workflow objects
      operationId: get_workflows
      description: |
        Get a list of Workflow objects and optionally filter via a Workflow id and or an Organisation id.
      produces:
      - application/json
      parameters:
      - in: query
        name: workflow_type_id
        description: filter workflows by a WorkflowType id
        required: false
        type: integer
      - in: query
        name: organisation_id
        description: filter workflows by an Organisation id
        required: false
        type: integer
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      responses:
        200:
          description: a list of Workflow objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Workflow'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/organisation:
    get:
      tags:
        - Observatory
      summary: get an Organisation
      operationId: get_organisation
      description: |
        Get the details of an Organisation by passing its id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: Organisation id
        required: true
        type: integer
      responses:
        200:
          description: the fetched Organisation
          schema:
            $ref: '#/definitions/Organisation'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
        - Observatory
      summary: create an Organisation
      operationId: post_organisation
      description: |
        Create an Organisation by passing an Organisation object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Organisation to create
        required: true
        schema:
          $ref: '#/definitions/Organisation'
      responses:
        201:
          description: Organisation created, returning the created object with an id
          schema:
            $ref: '#/definitions/Organisation'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
        - Observatory
      summary: create or update an Organisation
      operationId: put_organisation
      description: |
        Create an Organisation by passing an Organisation object, without an id. Update an existing Organisation by
        passing an Organisation object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Organisation to create or update
        required: true
        schema:
          $ref: '#/definitions/Organisation'
      responses:
        200:
          description: Organisation updated
          schema:
            $ref: '#/definitions/Organisation'
        201:
          description: Organisation created, returning the created object with an id
          schema:
            $ref: '#/definitions/Organisation'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
        - Observatory
      summary: delete an Organisation
      operationId: delete_organisation
      description: |
        Delete an Organisation by passing it's id.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          description: Organisation id
          required: true
          type: integer
      responses:
        200:
          description: Organisation deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/organisations:
    get:
      tags:
        - Observatory
      summary: Get a list of Organisations
      operationId: get_organisations
      description: |
        Gets a list of organisations
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      responses:
        200:
          description: a list of Organisation objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Organisation'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/table_type:
    get:
      tags:
      - Observatory
      summary: get a TableType
      operationId: get_table_type
      description: |
        Get the details of a TableType by passing it's id or type_id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: TableType id
        required: false
        type: integer
      - in: query
        name: type_id
        description: TableType type_id
        required: false
        type: string
      responses:
        200:
          description: the fetched TableType
          schema:
            $ref: '#/definitions/TableType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a TableType
      operationId: post_table_type
      description: |
        Create a TableType by passing a TableType object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: TableType to create
        required: true
        schema:
          $ref: '#/definitions/TableType'
      responses:
        201:
          description: TableType created, returning the created object with an id
          schema:
            $ref: '#/definitions/TableType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
      - Observatory
      summary: create or update a TableType
      operationId: put_table_type
      description: |
        Create a TableType by passing a TableType object, without an id. Update an existing TableType by
        passing a TableType object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: TableType to create or update
        required: true
        schema:
          $ref: '#/definitions/TableType'
      responses:
        200:
          description: TableType updated
          schema:
            $ref: '#/definitions/TableType'
        201:
          description: TableType created, returning the created object with an id
          schema:
            $ref: '#/definitions/TableType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
      - Observatory
      summary: delete a TableType
      operationId: delete_table_type
      description: |
        Delete a TableType by passing it's id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: TableType id
        required: true
        type: integer
      responses:
        200:
          description: TableType deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/table_types:
    get:
      tags:
      - Observatory
      summary: Get a list of TableType objects
      operationId: get_table_types
      description: |
        Get a list of TableType objects
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      responses:
        200:
          description: a list of TableType objects
          schema:
            type: array
            items:
              $ref: '#/definitions/TableType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/dataset_type:
    get:
      tags:
      - Observatory
      summary: get a DatasetType
      operationId: get_dataset_type
      description: |
        Get the details of a DatasetType by passing it's id or type_id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: DatasetType id
        required: false
        type: integer
      - in: query
        name: type_id
        description: DatasetType type_id
        required: false
        type: string
      responses:
        200:
          description: the fetched DatasetType
          schema:
            $ref: '#/definitions/DatasetType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a DatasetType
      operationId: post_dataset_type
      description: |
        Create a DatasetType by passing a DatasetType object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: DatasetType to create
        required: true
        schema:
          $ref: '#/definitions/DatasetType'
      responses:
        201:
          description: DatasetType created, returning the created object with an id
          schema:
            $ref: '#/definitions/DatasetType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
      - Observatory
      summary: create or update a DatasetType
      operationId: put_dataset_type
      description: |
        Create a DatasetType by passing a DatasetType object, without an id. Update an existing DatasetType by
        passing a DatasetType object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: DatasetType to create or update
        required: true
        schema:
          $ref: '#/definitions/DatasetType'
      responses:
        200:
          description: DatasetType updated
          schema:
            $ref: '#/definitions/DatasetType'
        201:
          description: DatasetType created, returning the created object with an id
          schema:
            $ref: '#/definitions/DatasetType'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
      - Observatory
      summary: delete a DatasetType
      operationId: delete_dataset_type
      description: |
        Delete a DatasetType by passing it's id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: DatasetType id
        required: true
        type: integer
      responses:
        200:
          description: DatasetType deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/dataset_types:
    get:
      tags:
      - Observatory
      summary: Get a list of DatasetType objects
      operationId: get_dataset_types
      description: |
        Get a list of DatasetType objects
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      responses:
        200:
          description: a list of DatasetType objects
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetType'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/dataset_release:
    get:
      tags:
      - Observatory
      summary: get a DatasetRelease
      operationId: get_dataset_release
      description: |
        Get the details of a DatasetRelease by passing it's id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: DatasetRelease id
        required: true
        type: integer
      responses:
        200:
          description: the fetched DatasetRelease
          schema:
            $ref: '#/definitions/DatasetRelease'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a DatasetRelease
      operationId: post_dataset_release
      description: |
        Create a DatasetRelease by passing a DatasetRelease object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: DatasetRelease to create
        required: true
        schema:
          $ref: '#/definitions/DatasetRelease'
      responses:
        201:
          description: DatasetRelease created, returning the created object with an id
          schema:
            $ref: '#/definitions/DatasetRelease'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
      - Observatory
      summary: create or update a DatasetRelease
      operationId: put_dataset_release
      description: |
        Create a DatasetRelease by passing a DatasetRelease object, without an id. Update an existing DatasetRelease by
        passing a DatasetRelease object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: DatasetRelease to create or update
        required: true
        schema:
          $ref: '#/definitions/DatasetRelease'
      responses:
        200:
          description: DatasetRelease updated
          schema:
            $ref: '#/definitions/DatasetRelease'
        201:
          description: DatasetRelease created, returning the created object with an id
          schema:
            $ref: '#/definitions/DatasetRelease'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
      - Observatory
      summary: delete a DatasetRelease
      operationId: delete_dataset_release
      description: |
        Delete a DatasetRelease by passing it's id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: DatasetRelease id
        required: true
        type: integer
      responses:
        200:
          description: DatasetRelease deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/dataset_releases:
    get:
      tags:
      - Observatory
      summary: Get a list of DatasetRelease objects
      operationId: get_dataset_releases
      description: |
        Get a list of DatasetRelease objects
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      - in: query
        name: dataset_id
        description: the dataset_id to fetch release info for
        required: false
        type: integer
      responses:
        200:
          description: a list of DatasetRelease objects
          schema:
            type: array
            items:
              $ref: '#/definitions/DatasetRelease'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/dataset:
    get:
      tags:
        - Observatory
      summary: get a Dataset
      operationId: get_dataset
      description: |
        Get the details of a Dataset by passing its id.
      produces:
      - application/json
      parameters:
      - in: query
        name: id
        description: Dataset id
        required: true
        type: integer
      responses:
        200:
          description: the fetched Dataset
          schema:
            $ref: '#/definitions/Dataset'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
        - Observatory
      summary: create a Dataset
      operationId: post_dataset
      description: |
        Create a Dataset by passing a Dataset object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Dataset to create
        required: true
        schema:
          $ref: '#/definitions/Dataset'
      responses:
        201:
          description: Dataset created, returning the created object with an id
          schema:
            $ref: '#/definitions/Dataset'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    put:
      tags:
        - Observatory
      summary: create or update a Dataset
      operationId: put_dataset
      description: |
        Create a Dataset by passing a Dataset object, without an id. Update an existing Dataset by
        passing an Dataset object with an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Dataset to create or update
        required: true
        schema:
          $ref: '#/definitions/Dataset'
      responses:
        200:
          description: Dataset updated
          schema:
            $ref: '#/definitions/Dataset'
        201:
          description: Dataset created, returning the created object with an id
          schema:
            $ref: '#/definitions/Dataset'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    delete:
      tags:
        - Observatory
      summary: delete a Dataset
      operationId: delete_dataset
      description: |
        Delete a Dataset by passing it's id.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          description: Dataset id
          required: true
          type: integer
      responses:
        200:
          description: Dataset deleted
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/datasets:
    get:
      tags:
        - Observatory
      summary: Get a list of Datasets
      operationId: get_datasets
      description: |
        Gets a list of datasets
      produces:
      - application/json
      parameters:
      - in: query
        name: limit
        description: the maximum number of results to return
        required: true
        type: integer
      - in: query
        name: workflow_id
        description: Workflow id to filter for
        required: false
        type: integer
      responses:
        200:
          description: a list of Dataset objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Dataset'
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'

  /v1/bigquery_bytes_processed:
    get:
      tags:
      - Observatory
      summary: get a BigQueryBytesProcessed
      operationId: get_bigquery_bytes_processed
      description: |
        Get the total bytes processed by a BigQuery project for the last 24 hours.
      produces:
      - application/json
      parameters:
      - in: query
        name: project
        description: the project id
        required: true
        type: string
      responses:
        200:
          description: the fetched BigQueryBytesProcessed
          schema:
            type: integer
            description: The total number of BigQuery bytes used for the project in the last 24 hours
            example: 126538
        400:
          description: bad input parameter
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'
    post:
      tags:
      - Observatory
      summary: create a BigQueryBytesProcessed
      operationId: post_bigquery_bytes_processed
      description: |
        Create a BigQueryBytesProcessed by passing a BigQueryBytesProcessed object, without an id.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: BigQueryBytesProcessed to create
        required: true
        schema:
          $ref: '#/definitions/BigQueryBytesProcessed'
      responses:
        201:
          description: BigQueryBytesProcessed created, returning the created object with an id
          schema:
            $ref: '#/definitions/BigQueryBytesProcessed'
        401:
          description: API key is missing or invalid
          $ref: '#/responses/UnauthorizedError'


definitions:
  WorkflowType:
    type: object
    properties:
      id:
        type: integer
        example: 1
      type_id:
        type: string
        example: onix
        minLength: 1
        maxLength: 250
      name:
        type: string
        example: Scopus
        minLength: 1
        maxLength: 250
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  Workflow:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Curtin University ONIX Workflow
        minLength: 1
        maxLength: 250
        x-nullable: true
      extra:
        type: object
        example: {'view-id': '830'}
        minLength: 1
        maxLength: 512
        x-nullable: true
      tags:
        type: string
        example: oaebu
        minLength: 1
        maxLength: 250
        x-nullable: true
      organisation:
        $ref: '#/definitions/Organisation'
      workflow_type:
        $ref: '#/definitions/WorkflowType'
      datasets:
        type: array
        items:
          $ref: '#/definitions/Dataset'
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  Organisation:
    type: object
    x-nullable: true
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Curtin University
        minLength: 1
        maxLength: 250
      project_id:
        type: string
        example: curtin-dev
        minLength: 6
        maxLength: 30
        x-nullable: true
      download_bucket:
        type: string
        example: curtin-dev-download
        minLength: 3
        maxLength: 222
        x-nullable: true
      transform_bucket:
        type: string
        example: curtin-dev-transform
        minLength: 3
        maxLength: 222
        x-nullable: true
      workflows:
        type: array
        readOnly: true
        items:
          $ref: '#/definitions/Workflow'
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  TableType:
    type: object
    properties:
      id:
        type: integer
        example: 1
      type_id:
        type: string
        example: bq_partitioned
        minLength: 1
        maxLength: 250
      name:
        type: string
        example: BigQuery partitioned table
        minLength: 1
        maxLength: 250
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  DatasetType:
    type: object
    properties:
      id:
        type: integer
        example: 1
      type_id:
        type: string
        example: onix
        minLength: 1
        maxLength: 250
      name:
        type: string
        example: ONIX dataset
        minLength: 1
        maxLength: 250
      extra:
        type: object
        example: {'isbn_field': 'ISBN', 'type': 'snapshot'}
        minLength: 1
        maxLength: 512
        x-nullable: true
      table_type:
        $ref: '#/definitions/TableType'
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  DatasetRelease:
    type: object
    properties:
      id:
        type: integer
        example: 1
      start_date:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
      end_date:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        x-nullable: true
      dataset:
        $ref: '#/definitions/Dataset'
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

  Dataset:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: RoR
        minLength: 1
        maxLength: 250
      workflow:
        $ref: '#/definitions/Workflow'
      service:
        type: string
        example: google
        minLength: 1
        maxLength: 250
      address:
        type: string
        example: curtin_gcp_project_id.my_dataset_id.my_table
        minLength: 1
        maxLength: 250
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true
      dataset_type:
        $ref: '#/definitions/DatasetType'

  BigQueryBytesProcessed:
    type: object
    properties:
      id:
        type: integer
        example: 1
      project:
        type: string
        example: coki
        minLength: 3
        maxLength: 222
      total:
        type: integer
        example: 0
      created:
        type: string
        format: date-time
        example: 2020-01-01T20:01:05Z
        readOnly: true
      modified:
        type: string
        format: date-time
        example: 2020-01-02T20:01:05Z
        readOnly: true

responses:
  UnauthorizedError:
    description: API key is missing or invalid
    headers:
      WWW_Authenticate:
        type: string