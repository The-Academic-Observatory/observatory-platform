# Copyright 2021 Curtin University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Aniek Roelofs, James Diprose

"""
    Observatory API

    The REST API for managing and accessing data from the Observatory Platform.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: agent@observatory.academy
    Generated by: https://openapi-generator.tech
"""

import copy
import datetime
import unittest
from unittest.mock import patch

import pendulum
import pytz

import observatory.api.server.orm as orm
from observatory.api.client import Configuration, ApiClient
from observatory.api.client.api.observatory_api import ObservatoryApi  # noqa: E501
from observatory.api.client.exceptions import NotFoundException, ApiException, ApiValueError
from observatory.api.client.model.organisation import Organisation
from observatory.api.client.model.telescope import Telescope
from observatory.api.client.model.telescope_type import TelescopeType
from observatory.api.testing import ObservatoryApiEnvironment
from tests.observatory.api.server.test_elastic import SCROLL_ID, Elasticsearch

RES_EXAMPLE = {
    '_scroll_id': SCROLL_ID,
    'hits': {
        'total': {
            'value': 452
        },
        'hits': [{
            '_index': 'journals-institution-20201205',
            '_type': '_doc',
            '_id': 'bQ88QXYBGinIh2YA4IaO',
            '_score': None,
            '_source': {
                'id': 'example_id',
                'name': 'Example Name',
                'published_year': datetime.datetime(year=2018, month=12, day=31, tzinfo=pytz.UTC)
            },
            'sort': [77250]
        }, {
            '_index': 'journals-institution-20201205',
            '_type': '_doc',
            '_id': 'bQ88QXYBGinIh2YA4Ia1',
            '_score': None,
            '_source': {
                'id': 'example_id2',
                'name': 'Example Name2',
                'published_year': datetime.datetime(year=2018, month=12, day=31, tzinfo=pytz.UTC)
            },
            'sort': [77251]
        }]
    }
}


def make_telescope_types(env: ObservatoryApiEnvironment, dt):
    # Add TelescopeType objects
    telescope_types = [('onix', 'ONIX Telescope'), ('jstor', 'JSTOR Telescope'),
                       ('google_analytics', 'Google Analytics Telescope')]

    for type_id, name in telescope_types:
        env.session.add(orm.TelescopeType(type_id=type_id, name=name, created=dt, modified=dt))
    env.session.commit()

    return telescope_types


class TestObservatoryApi(unittest.TestCase):
    """ObservatoryApi unit test stubs"""

    def setUp(self):
        self.timezone = 'Pacific/Auckland'
        self.host = "localhost"
        self.port = 5001
        configuration = Configuration(host=f"http://{self.host}:{self.port}")
        api_client = ApiClient(configuration)
        self.api = ObservatoryApi(api_client=api_client)  # noqa: E501
        self.env = ObservatoryApiEnvironment(host=self.host, port=self.port)

    def tearDown(self):
        pass

    def test_delete_organisation(self):
        """Test case for delete_organisation

        delete an Organisation  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_organisation(expected_id)

            with self.assertRaises(NotFoundException) as e:
                self.api.delete_organisation(expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: Organisation with id {expected_id}"\n', e.exception.body)

    def test_delete_telescope(self):
        """Test case for delete_telescope

        delete a Telescope  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            telescope_type_name = 'ONIX Telescope'
            org_name = 'Curtin University'
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(type_id='onix', name=telescope_type_name, created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name=org_name, created=dt, modified=dt))
            self.env.session.commit()
            self.env.session.add(orm.Telescope(organisation={'id': expected_id},
                                               telescope_type={'id': expected_id},
                                               created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_telescope(expected_id)

            with self.assertRaises(NotFoundException) as e:
                self.api.delete_telescope(expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: Telescope with id {expected_id}"\n', e.exception.body)

    def test_delete_telescope_type(self):
        """Test case for delete_telescope_type

        delete a TelescopeType  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(type_id='onix', name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_telescope_type(expected_id)

            with self.assertRaises(NotFoundException) as e:
                self.api.delete_telescope_type(expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: TelescopeType with id {expected_id}"\n', e.exception.body)

    def test_get_organisation(self):
        """Test case for get_organisation

        get an Organisation  # noqa: E501
        """

        with self.env.create():
            expected_id = 1

            # Assert that TelescopeType with given id does not exist
            with self.assertRaises(NotFoundException) as e:
                self.api.get_telescope_type(id=expected_id)

            # Add TelescopeType
            name = 'Curtin University'
            gcp_project_id = 'my-project-id'
            gcp_download_bucket = 'my-download-bucket'
            gcp_transform_bucket = 'my-transform-bucket'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.Organisation(name=name,
                                                  gcp_project_id=gcp_project_id,
                                                  gcp_download_bucket=gcp_download_bucket,
                                                  gcp_transform_bucket=gcp_transform_bucket,
                                                  created=dt,
                                                  modified=dt))
            self.env.session.commit()

            # Assert that TelescopeType with given id exists
            obj = self.api.get_organisation(expected_id)
            self.assertIsInstance(obj, Organisation)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(name, obj.name)
            self.assertEqual(gcp_project_id, obj.gcp_project_id)
            self.assertEqual(gcp_download_bucket, obj.gcp_download_bucket)
            self.assertEqual(gcp_transform_bucket, obj.gcp_transform_bucket)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_organisations(self):
        """Test case for get_organisations

        Get a list of Organisations  # noqa: E501
        """

        with self.env.create():
            # Add Organisation objects
            names = ['Curtin University', 'Massachusetts Institute of Technology', 'Harvard University']
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            for name in names:
                self.env.session.add(orm.Organisation(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that Organisation objects returned
            objects = self.api.get_organisations(limit=10)
            self.assertEqual(len(names), len(objects))
            for i, (obj, name) in enumerate(zip(objects, names)):
                expected_id = i + 1
                self.assertIsInstance(obj, Organisation)
                self.assertEqual(expected_id, obj.id)
                self.assertEqual(name, obj.name)
                self.assertEqual(dt_utc, obj.created)
                self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope(self):
        """Test case for get_telescope

        get a Telescope  # noqa: E501
        """

        with self.env.create():
            expected_id = 1

            # Assert that Telescope with given id does not exist
            with self.assertRaises(NotFoundException) as e:
                self.api.get_telescope(expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: Telescope with id {expected_id}"\n', e.exception.body)

            # Add Telescope
            telescope_type_name = 'ONIX Telescope'
            org_name = 'Curtin University'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.TelescopeType(type_id='onix', name=telescope_type_name, created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name=org_name, created=dt, modified=dt))
            self.env.session.commit()
            self.env.session.add(orm.Telescope(name='Curtin ONIX Telescope',
                                               extra={'view_id': 123456},
                                               organisation={'id': expected_id},
                                               telescope_type={'id': expected_id},
                                               created=dt,
                                               modified=dt))
            self.env.session.commit()

            # Assert that Telescope with given id exists
            obj = self.api.get_telescope(expected_id)
            self.assertIsInstance(obj, Telescope)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(expected_id, obj.organisation.id)
            self.assertEqual(org_name, obj.organisation.name)
            self.assertEqual(expected_id, obj.telescope_type.id)
            self.assertEqual(telescope_type_name, obj.telescope_type.name)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope_type(self):
        """Test case for get_telescope_type

        get a TelescopeType  # noqa: E501
        """

        with self.env.create():
            expected_id = 1
            type_id = 'onix'

            # Assert that TelescopeType with given id does not exist
            with self.assertRaises(NotFoundException) as e:
                self.api.get_telescope_type(id=expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: TelescopeType with id {expected_id}"\n', e.exception.body)

            # Assert that TelescopeType with given type_id does not exist
            with self.assertRaises(NotFoundException) as e:
                self.api.get_telescope_type(type_id=type_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: TelescopeType with type_id {type_id}"\n', e.exception.body)

            # Assert that 400 error raised: both missing
            expected_body = '"At least one and only one of id or type_id must be specified"\n'
            with self.assertRaises(ApiException) as e:
                self.api.get_telescope_type()
            self.assertEqual(400, e.exception.status)
            self.assertEqual(expected_body, e.exception.body)

            # Assert that 400 error raised: both present
            with self.assertRaises(ApiException) as e:
                self.api.get_telescope_type(id=expected_id, type_id=type_id)
            self.assertEqual(400, e.exception.status)
            self.assertEqual(expected_body, e.exception.body)

            # Add TelescopeType
            name = 'ONIX Telescope'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.TelescopeType(type_id=type_id, name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that TelescopeType with given id exists
            obj = self.api.get_telescope_type(id=expected_id)
            self.assertIsInstance(obj, TelescopeType)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(name, obj.name)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

            # Assert that TelescopeType can be fetched with type_id
            obj = self.api.get_telescope_type(type_id=type_id)
            self.assertIsInstance(obj, TelescopeType)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(name, obj.name)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope_types(self):
        """Test case for get_telescope_types

        Get a list of TelescopeType objects  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType objects
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            telescope_types = make_telescope_types(self.env, dt)

            # Assert that TelescopeType objects returned
            objects = self.api.get_telescope_types(limit=10)
            self.assertEqual(len(telescope_types), len(objects))
            for i, (obj, (type_id, name)) in enumerate(zip(objects, telescope_types)):
                expected_id = i + 1
                self.assertIsInstance(obj, TelescopeType)
                self.assertEqual(expected_id, obj.id)
                self.assertEqual(type_id, obj.type_id)
                self.assertEqual(name, obj.name)
                self.assertEqual(dt_utc, obj.created)
                self.assertEqual(dt_utc, obj.modified)

    def test_get_telescopes(self):
        """Test case for get_telescopes

        Get a list of Telescope objects  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType objects
            dt = pendulum.datetime.now(self.timezone)
            make_telescope_types(self.env, dt)

            # Add Organisations
            names = ['Curtin University', 'Massachusetts Institute of Technology']
            for name in names:
                self.env.session.add(orm.Organisation(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Add Telescopes
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(
                orm.Telescope(organisation={'id': 1}, telescope_type={'id': 1}, created=dt, modified=dt))
            self.env.session.add(
                orm.Telescope(organisation={'id': 1}, telescope_type={'id': 2}, created=dt, modified=dt))
            self.env.session.add(
                orm.Telescope(organisation={'id': 2}, telescope_type={'id': 1}, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that all Telescope objects returned
            objects = self.api.get_telescopes(limit=10)
            self.assertEqual(3, len(objects))

            # Assert that Organisation 1 Telescope objects returned
            objects = self.api.get_telescopes(organisation_id=1, limit=10)
            self.assertEqual(2, len(objects))

            # Assert that Organisation 2 Telescope objects returned
            objects = self.api.get_telescopes(organisation_id=2, limit=10)
            self.assertEqual(1, len(objects))

            # Assert that TelescopeType 1 Telescope objects returned
            objects = self.api.get_telescopes(telescope_type_id=1, limit=10)
            self.assertEqual(2, len(objects))

            # Assert that TelescopeType 2 Telescope objects returned
            objects = self.api.get_telescopes(telescope_type_id=2, limit=10)
            self.assertEqual(1, len(objects))

    def test_post_organisation(self):
        """Test case for post_organisation

        create an Organisation  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1
            obj = Organisation(name='Curtin University')
            result = self.api.post_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)

    def test_post_telescope(self):
        """Test case for post_telescope

        create a Telescope  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType and Organisation
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(type_id='onix', name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.commit()

            # Post telescope
            expected_id = 1
            obj = Telescope(name='Curtin University ONIX Telescope',
                            extra={'view_id': 123456},
                            organisation=Organisation(id=expected_id),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.post_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)

    def test_post_telescope_type(self):
        """Test case for post_telescope_type

        create a TelescopeType  # noqa: E501
        """

        with self.env.create():
            expected_id = 1
            obj = TelescopeType(type_id='onix', name='ONIX Telescope')
            result = self.api.post_telescope_type(obj)

            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)

    def test_put_organisation(self):
        """Test case for put_organisation

        create or update an Organisation  # noqa: E501
        """

        with self.env.create():
            # Put create
            expected_id = 1
            name = 'Curtin University'
            obj = Organisation(name=name)
            result = self.api.put_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(name, result.name)

            # Put update
            new_name = 'Massachusetts Institute of Technology'
            obj = Organisation(id=expected_id, name=new_name)
            result = self.api.put_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(new_name, result.name)

            # Put not found
            expected_id = 2
            with self.assertRaises(NotFoundException) as e:
                self.api.put_organisation(Organisation(id=expected_id, name=new_name))
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: Organisation with id {expected_id}"\n', e.exception.body)

    def test_put_telescope(self):
        """Test case for put_telescope

        create or update a Telescope  # noqa: E501
        """

        with self.env.create():
            expected_id = 1
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(type_id='onix', name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Massachusetts Institute of Technology',
                                                  created=dt, modified=dt))
            self.env.session.commit()

            # Put create
            obj = Telescope(organisation=Organisation(id=expected_id),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.put_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)

            # Put update
            name = 'Curtin ONIX Telescope'
            extra = {'view_id': 123456}
            obj = Telescope(id=expected_id,
                            name=name,
                            extra=extra,
                            organisation=Organisation(id=2),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.put_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(name, result.name)
            self.assertDictEqual(extra, result.extra)
            self.assertEqual('Massachusetts Institute of Technology', result.organisation.name)

            # Put not found
            expected_id = 2
            with self.assertRaises(NotFoundException) as e:
                self.api.put_telescope(Telescope(id=expected_id,
                                                 organisation=Organisation(id=expected_id),
                                                 telescope_type=TelescopeType(id=expected_id)))
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: Telescope with id {expected_id}"\n', e.exception.body)

    def test_put_telescope_type(self):
        """Test case for put_telescope_type

        create or update a TelescopeType  # noqa: E501
        """

        with self.env.create():
            # Put create
            expected_id = 1
            name = 'ONIX Telescope'
            obj = TelescopeType(type_id='onix', name=name)
            result = self.api.put_telescope_type(obj)
            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(name, result.name)

            # Put update
            new_name = 'Google Analytics Telescope'
            obj = TelescopeType(type_id='google_analytics', id=expected_id, name=new_name)
            result = self.api.put_telescope_type(obj)
            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(new_name, result.name)

            # Put not found
            expected_id = 2
            with self.assertRaises(NotFoundException) as e:
                self.api.put_telescope_type(TelescopeType(id=expected_id, name=new_name))
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: TelescopeType with id {expected_id}"\n', e.exception.body)

    @patch('observatory.api.server.elastic.Elasticsearch.scroll')
    @patch('observatory.api.server.elastic.Elasticsearch.search')
    @patch('observatory.api.server.api.create_es_connection')
    def test_queryv1(self, mock_create_connection, mock_es_search, mock_es_scroll):
        """Test case for queryv1

        Search the Observatory API  # noqa: E501
        """

        with self.env.create():
            # Test ElasticSearch connection is None
            mock_create_connection.return_value = None

            with self.assertRaises(ApiException) as e:
                self.api.queryv1(subset='citations', agg='country', limit=1000)
            self.assertEqual(400, e.exception.status)
            self.assertEqual('"Elasticsearch environment variable for host or api key is empty"\n', e.exception.body)

            # Test successful query
            mock_create_connection.return_value = Elasticsearch()
            res = copy.deepcopy(RES_EXAMPLE)
            mock_es_scroll.return_value = res

            expected_results = {
                'version': 'v1',
                'index': 'N/A',
                'scroll_id': SCROLL_ID,
                'returned_hits': len(res['hits']['hits']),
                'total_hits': res['hits']['total']['value'],
                'schema': {
                    'schema': 'to_be_created'
                },
                'results': res['hits']['hits']
            }

            response = self.api.queryv1(subset='citations', agg='funder', limit=1000, scroll_id=SCROLL_ID)
            self.assertEqual(expected_results['version'], response.version)
            self.assertEqual(expected_results['index'], response.index)
            self.assertEqual(expected_results['scroll_id'], response.scroll_id)
            self.assertEqual(expected_results['returned_hits'], response.returned_hits)
            self.assertEqual(expected_results['schema'], response.schema)
            self.assertEqual(expected_results['results'], response.results)

            # With search body, test with empty (invalid) subset and agg
            mock_es_search.return_value = copy.deepcopy(RES_EXAMPLE)

            with self.assertRaises(ApiValueError) as e:
                self.api.queryv1(subset='', agg='', limit=1000, scroll_id=SCROLL_ID)

            # With search body, test with valid alias and without index date
            with patch('elasticsearch.client.CatClient.aliases') as mock_es_cat:
                res = copy.deepcopy(RES_EXAMPLE)
                mock_es_search.return_value = res
                index_name = 'citations-country-20201212'
                mock_es_cat.return_value = [{
                    'index': index_name
                }]
                expected_results = {
                    'version': 'v1',
                    'index': index_name,
                    'scroll_id': SCROLL_ID,
                    'returned_hits': len(res['hits']['hits']),
                    'total_hits': res['hits']['total']['value'],
                    'schema': {
                        'schema': 'to_be_created'
                    },
                    'results': res['hits']['hits']
                }

                response = self.api.queryv1(subset='citations', agg='country', limit=1000)
                self.assertEqual(expected_results['version'], response.version)
                self.assertEqual(expected_results['index'], response.index)
                self.assertEqual(expected_results['scroll_id'], response.scroll_id)
                self.assertEqual(expected_results['returned_hits'], response.returned_hits)
                self.assertEqual(expected_results['schema'], response.schema)
                self.assertEqual(expected_results['results'], response.results)

            # With search body, test with valid index date
            with patch('elasticsearch.client.IndicesClient.exists') as mock_es_indices:
                res = copy.deepcopy(RES_EXAMPLE)
                mock_es_indices.return_value = True
                mock_es_search.return_value = res
                index_date = pendulum.date(year=2020, month=1, day=1)

                expected_results = {
                    'version': 'v1',
                    'index': f"citations-country-{index_date.strftime('%Y%m%d')}",
                    'scroll_id': SCROLL_ID,
                    'returned_hits': len(res['hits']['hits']),
                    'total_hits': res['hits']['total']['value'],
                    'schema': {
                        'schema': 'to_be_created'
                    },
                    'results': res['hits']['hits']
                }

                response = self.api.queryv1(subset='citations', agg='country', index_date=index_date, limit=1000)
                self.assertEqual(expected_results['version'], response.version)
                self.assertEqual(expected_results['index'], response.index)
                self.assertEqual(expected_results['scroll_id'], response.scroll_id)
                self.assertEqual(expected_results['returned_hits'], response.returned_hits)
                self.assertEqual(expected_results['schema'], response.schema)
                self.assertEqual(expected_results['results'], response.results)

                # With search body, test with invalid index date
                with patch('observatory.api.server.api.list_available_index_dates') as mock_index_dates:
                    res = copy.deepcopy(RES_EXAMPLE)
                    mock_es_search.return_value = res

                    mock_es_indices.return_value = False
                    available_date = '20201212'
                    mock_index_dates.return_value = [available_date]

                    with self.assertRaises(ApiException) as e:
                        self.api.queryv1(subset='citations', agg='country', index_date=index_date, limit=1000)

                    self.assertEqual(400, e.exception.status)
                    self.assertEqual('"Index does not exist: citations-country-20200101\\n Available dates for this '
                                     'agg & subset:\\n20201212"\n',
                                     e.exception.body)


if __name__ == '__main__':
    unittest.main()
