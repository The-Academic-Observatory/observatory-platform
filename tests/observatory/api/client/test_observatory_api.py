# Copyright 2021 Curtin University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Aniek Roelofs, James Diprose

"""
    Observatory API

    The REST API for managing and accessing data from the Observatory Platform.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: agent@observatory.academy
    Generated by: https://openapi-generator.tech
"""

import unittest

import pendulum

import observatory.api.server.orm as orm
from observatory.api.client import ApiClient, Configuration
from observatory.api.client.api.observatory_api import ObservatoryApi  # noqa: E501
from observatory.api.client.exceptions import (
    NotFoundException,
)
from observatory.api.client.model.dataset_release import DatasetRelease
from observatory.api.testing import ObservatoryApiEnvironment
from observatory.platform.observatory_environment import find_free_port


class TestObservatoryApi(unittest.TestCase):
    """ObservatoryApi unit test stubs"""

    def setUp(self):
        self.timezone = "Pacific/Auckland"
        self.host = "localhost"
        self.port = find_free_port()
        configuration = Configuration(host=f"http://{self.host}:{self.port}")
        api_client = ApiClient(configuration)
        self.api = ObservatoryApi(api_client=api_client)  # noqa: E501
        self.env = ObservatoryApiEnvironment(host=self.host, port=self.port)

    def test_ctor(self):
        api = ObservatoryApi()
        self.assertTrue(api.api_client is not None)

    def test_get_dataset_release(self):
        """Test case for get_dataset_release"""

        with self.env.create():
            # Not found
            expected_id = 1
            with self.assertRaises(NotFoundException) as e:
                self.api.get_dataset_release(id=expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: DatasetRelease with id {expected_id}"\n', e.exception.body)

            # Add DatasetRelease to database
            dt = pendulum.now(self.timezone)
            dt_utc = dt.in_tz(tz="UTC")
            self.env.session.add(
                orm.DatasetRelease(
                    dag_id="doi_workflow",
                    dataset_id="doi",
                    dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                    data_interval_start=dt,
                    data_interval_end=dt,
                    partition_date=dt,
                    snapshot_date=dt,
                    changefile_start_date=dt,
                    changefile_end_date=dt,
                    sequence_start=1,
                    sequence_end=10,
                    extra={"hello": "world"},
                    created=dt,
                    modified=dt,
                )
            )
            self.env.session.commit()

            # Assert that DatasetRelease with given id exists
            obj = self.api.get_dataset_release(id=expected_id)
            self.assertIsInstance(obj, DatasetRelease)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual("doi_workflow", obj.dag_id)
            self.assertEqual("doi", obj.dataset_id)
            self.assertEqual("scheduled__2023-03-26T00:00:00+00:00", obj.dag_run_id)
            self.assertEqual(dt_utc, obj.data_interval_start)
            self.assertEqual(dt_utc, obj.data_interval_end)
            self.assertEqual(dt_utc, obj.snapshot_date)
            self.assertEqual(dt_utc, obj.partition_date)
            self.assertEqual(dt_utc, obj.changefile_start_date)
            self.assertEqual(dt_utc, obj.changefile_end_date)
            self.assertEqual(1, obj.sequence_start)
            self.assertEqual(10, obj.sequence_end)
            self.assertEqual({"hello": "world"}, obj.extra)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

            # Search by dataset_id
            obj = self.api.get_dataset_release(expected_id)
            self.assertIsInstance(obj, DatasetRelease)

            # DatasetRelease not found
            id = 2
            self.assertRaises(NotFoundException, self.api.get_dataset_release, id)

    def test_post_dataset_release(self):
        """Test case for post_dataset_release"""

        with self.env.create():
            # Post DatasetRelease
            expected_id = 1
            dt = pendulum.now(self.timezone)
            dt_utc = dt.in_tz(tz="UTC")
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="doi",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                data_interval_start=dt,
                data_interval_end=dt,
                snapshot_date=dt,
                partition_date=dt,
                changefile_start_date=dt,
                changefile_end_date=dt,
                sequence_start=1,
                sequence_end=10,
                extra={"hello": "world"},
            )
            result = self.api.post_dataset_release(obj)
            self.assertIsInstance(result, DatasetRelease)
            self.assertEqual(expected_id, result.id)
            self.assertEqual("doi_workflow", result.dag_id)
            self.assertEqual("doi", result.dataset_id)
            self.assertEqual("scheduled__2023-03-26T00:00:00+00:00", result.dag_run_id)
            self.assertEqual(dt_utc, result.data_interval_start)
            self.assertEqual(dt_utc, result.data_interval_end)
            self.assertEqual(dt_utc, result.snapshot_date)
            self.assertEqual(dt_utc, result.partition_date)
            self.assertEqual(dt_utc, result.changefile_start_date)
            self.assertEqual(dt_utc, result.changefile_end_date)
            self.assertEqual(1, result.sequence_start)
            self.assertEqual(10, result.sequence_end)
            self.assertEqual({"hello": "world"}, result.extra)

    def test_put_dataset_release(self):
        """Test case for put_dataset_release"""

        with self.env.create():
            # Put create
            expected_id = 1
            dt = pendulum.now(self.timezone)
            dt_utc = dt.in_tz(tz="UTC")
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="doi",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                data_interval_start=dt,
                data_interval_end=dt,
                snapshot_date=dt,
                partition_date=dt,
                changefile_start_date=dt,
                changefile_end_date=dt,
                sequence_start=1,
                sequence_end=10,
                extra={"hello": "world"},
            )
            result = self.api.put_dataset_release(obj)
            self.assertIsInstance(result, DatasetRelease)
            self.assertEqual(expected_id, result.id)
            self.assertEqual("doi_workflow", result.dag_id)
            self.assertEqual("doi", result.dataset_id)
            self.assertEqual("scheduled__2023-03-26T00:00:00+00:00", result.dag_run_id)
            self.assertEqual(dt_utc, result.data_interval_start)
            self.assertEqual(dt_utc, result.data_interval_end)
            self.assertEqual(dt_utc, result.snapshot_date)
            self.assertEqual(dt_utc, result.partition_date)
            self.assertEqual(dt_utc, result.changefile_start_date)
            self.assertEqual(dt_utc, result.changefile_end_date)
            self.assertEqual(1, result.sequence_start)
            self.assertEqual(10, result.sequence_end)
            self.assertEqual({"hello": "world"}, result.extra)

            # Put update
            obj = DatasetRelease(
                id=expected_id,
                sequence_start=2,
            )
            result = self.api.put_dataset_release(obj)
            self.assertIsInstance(result, DatasetRelease)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(2, result.sequence_start)

            # Put not found
            expected_id = 2
            with self.assertRaises(NotFoundException) as e:
                self.api.put_dataset_release(
                    DatasetRelease(
                        id=expected_id,
                        dag_id="doi_workflow",
                        dataset_id="doi",
                        dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                        data_interval_start=dt,
                        data_interval_end=dt,
                        snapshot_date=dt,
                        partition_date=dt,
                        changefile_start_date=dt,
                        changefile_end_date=dt,
                        sequence_start=1,
                        sequence_end=10,
                    )
                )
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: DatasetRelease with id {expected_id}"\n', e.exception.body)

    def test_get_dataset_releases(self):
        """Test case for get_dataset_releases"""

        with self.env.create():
            # Post DatasetRelease
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="doi",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                snapshot_date=pendulum.datetime(2023, 1, 1),
            )
            self.api.post_dataset_release(obj)
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="doi",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                snapshot_date=pendulum.datetime(2023, 1, 7),
            )
            self.api.post_dataset_release(obj)
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="author",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                snapshot_date=pendulum.datetime(2023, 1, 7),
            )
            self.api.post_dataset_release(obj)

            # Assert that all DatasetRelease objects returned
            objects = self.api.get_dataset_releases(dag_id="doi_workflow", dataset_id="doi")
            self.assertEqual(2, len(objects))
            self.assertIsInstance(objects[0], DatasetRelease)
            self.assertIsInstance(objects[1], DatasetRelease)

            self.assertEqual(objects[0].id, 1)
            self.assertEqual(objects[0].dag_id, "doi_workflow")
            self.assertEqual(objects[0].dataset_id, "doi")
            self.assertEqual(objects[1].id, 2)
            self.assertEqual(objects[1].dag_id, "doi_workflow")
            self.assertEqual(objects[1].dataset_id, "doi")

            objects = self.api.get_dataset_releases(dag_id="doi_workflow", dataset_id="author")
            self.assertEqual(1, len(objects))
            self.assertIsInstance(objects[0], DatasetRelease)
            self.assertEqual(objects[0].dag_id, "doi_workflow")
            self.assertEqual(objects[0].dataset_id, "author")

    def test_delete_dataset_release(self):
        """Test case for delete_dataset_release"""

        with self.env.create():
            # Post DatasetRelease
            expected_id = 1
            obj = DatasetRelease(
                dag_id="doi_workflow",
                dataset_id="doi",
                dag_run_id="scheduled__2023-03-26T00:00:00+00:00",
                snapshot_date=pendulum.datetime(2023, 1, 1),
            )
            self.api.post_dataset_release(obj)
            self.api.delete_dataset_release(expected_id)

            with self.assertRaises(NotFoundException) as e:
                self.api.delete_dataset_release(expected_id)
            self.assertEqual(404, e.exception.status)
            self.assertEqual(f'"Not found: DatasetRelease with id {expected_id}"\n', e.exception.body)


if __name__ == "__main__":
    unittest.main()
