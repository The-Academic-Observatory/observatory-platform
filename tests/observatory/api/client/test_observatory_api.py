"""
    Observatory API

    The REST API for managing and accessing data from the Observatory Platform.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: agent@observatory.academy
    Generated by: https://openapi-generator.tech
"""

import contextlib
import threading
import unittest

import pendulum
from sqlalchemy.pool import StaticPool
from werkzeug.serving import make_server

import observatory.api.server.orm as orm
from observatory.api.client import Configuration, ApiClient
from observatory.api.client.api.observatory_api import ObservatoryApi  # noqa: E501
from observatory.api.client.exceptions import NotFoundException
from observatory.api.client.model.organisation import Organisation
from observatory.api.client.model.telescope import Telescope
from observatory.api.client.model.telescope_type import TelescopeType
from observatory.api.server.api import create_app
from observatory.api.server.orm import create_session, set_session


class ObservatoryApiEnvironment:

    def __init__(self, host: str = "localhost", port: int = 5000):
        self.host = host
        self.port = port
        self.db_uri = 'sqlite://'
        self.session = None
        self.server = None
        self.server_thread = None

    @contextlib.contextmanager
    def create(self):
        """ Make and destroy an Observatory API isolated environment, which involves:

        * Creating an in memory SQLite database for the API backend to connect to
        * Start the Connexion / Flask app

        :yield: None.
        """

        try:
            # Connect to in memory SQLite database with SQLAlchemy
            self.session = create_session(uri=self.db_uri,
                                          connect_args={'check_same_thread': False},
                                          poolclass=StaticPool)
            set_session(self.session)

            # Create the Connexion App and start the server
            app = create_app()
            self.server = make_server("localhost", 5000, app)
            self.server_thread = threading.Thread(target=self.server.serve_forever)
            self.server_thread.start()
            yield
        finally:
            # Stop server and wait for server thread to join
            self.server.shutdown()
            self.server_thread.join()


class TestObservatoryApi(unittest.TestCase):
    """ObservatoryApi unit test stubs"""

    def setUp(self):
        self.timezone = 'Pacific/Auckland'
        self.host = "localhost"
        self.port = 5000
        configuration = Configuration(host=f"http://{self.host}:{self.port}")
        api_client = ApiClient(configuration)
        self.api = ObservatoryApi(api_client=api_client)  # noqa: E501
        self.env = ObservatoryApiEnvironment(host=self.host, port=self.port)

    def tearDown(self):
        pass

    def test_delete_organisation(self):
        """Test case for delete_organisation

        delete an Organisation  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_organisation(expected_id)

            with self.assertRaises(NotFoundException):
                self.api.delete_organisation(expected_id)

    def test_delete_telescope(self):
        """Test case for delete_telescope

        delete a Telescope  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            telescope_type_name = 'ONIX Telescope'
            org_name = 'Curtin University'
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(name=telescope_type_name, created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name=org_name, created=dt, modified=dt))
            self.env.session.commit()
            self.env.session.add(orm.Telescope(organisation={'id': expected_id},
                                               telescope_type={'id': expected_id},
                                               created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_telescope(expected_id)

            with self.assertRaises(NotFoundException):
                self.api.delete_telescope(expected_id)

    def test_delete_telescope_type(self):
        """Test case for delete_telescope_type

        delete a TelescopeType  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1

            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.commit()

            result = self.api.delete_telescope_type(expected_id)

            with self.assertRaises(NotFoundException):
                self.api.delete_telescope_type(expected_id)

    def test_get_organisation(self):
        """Test case for get_organisation

        get an Organisation  # noqa: E501
        """

        with self.env.create():
            expected_id = 1

            # Assert that TelescopeType with given id does not exist
            with self.assertRaises(NotFoundException):
                self.api.get_telescope_type(expected_id)

            # Add TelescopeType
            name = 'Curtin University'
            gcp_project_id = 'my-project-id'
            gcp_download_bucket = 'my-download-bucket'
            gcp_transform_bucket = 'my-transform-bucket'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.Organisation(name=name,
                                                  gcp_project_id=gcp_project_id,
                                                  gcp_download_bucket=gcp_download_bucket,
                                                  gcp_transform_bucket=gcp_transform_bucket,
                                                  created=dt,
                                                  modified=dt))
            self.env.session.commit()

            # Assert that TelescopeType with given id exists
            obj = self.api.get_organisation(expected_id)
            self.assertIsInstance(obj, Organisation)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(name, obj.name)
            self.assertEqual(gcp_project_id, obj.gcp_project_id)
            self.assertEqual(gcp_download_bucket, obj.gcp_download_bucket)
            self.assertEqual(gcp_transform_bucket, obj.gcp_transform_bucket)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_organisations(self):
        """Test case for get_organisations

        Get a list of Organisations  # noqa: E501
        """

        with self.env.create():
            # Add Organisation objects
            names = ['Curtin University', 'Massachusetts Institute of Technology', 'Harvard University']
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            for name in names:
                self.env.session.add(orm.Organisation(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that Organisation objects returned
            objects = self.api.get_organisations(limit=10)
            self.assertEqual(len(names), len(objects))
            for i, (obj, name) in enumerate(zip(objects, names)):
                expected_id = i + 1
                self.assertIsInstance(obj, Organisation)
                self.assertEqual(expected_id, obj.id)
                self.assertEqual(name, obj.name)
                self.assertEqual(dt_utc, obj.created)
                self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope(self):
        """Test case for get_telescope

        get a Telescope  # noqa: E501
        """

        with self.env.create():
            expected_id = 1

            # Assert that Telescope with given id does not exist
            with self.assertRaises(NotFoundException):
                self.api.get_telescope(expected_id)

            # Add Telescope
            telescope_type_name = 'ONIX Telescope'
            org_name = 'Curtin University'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.TelescopeType(name=telescope_type_name, created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name=org_name, created=dt, modified=dt))
            self.env.session.commit()
            self.env.session.add(orm.Telescope(organisation={'id': expected_id},
                                               telescope_type={'id': expected_id},
                                               created=dt, modified=dt))
            self.env.session.commit()

            # Assert that Telescope with given id exists
            obj = self.api.get_telescope(expected_id)
            self.assertIsInstance(obj, Telescope)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(expected_id, obj.organisation.id)
            self.assertEqual(org_name, obj.organisation.name)
            self.assertEqual(expected_id, obj.telescope_type.id)
            self.assertEqual(telescope_type_name, obj.telescope_type.name)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope_type(self):
        """Test case for get_telescope_type

        get a TelescopeType  # noqa: E501
        """

        with self.env.create():
            expected_id = 1

            # Assert that TelescopeType with given id does not exist
            with self.assertRaises(NotFoundException):
                self.api.get_telescope_type(expected_id)

            # Add TelescopeType
            name = 'ONIX Telescope'
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            self.env.session.add(orm.TelescopeType(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that TelescopeType with given id exists
            obj = self.api.get_telescope_type(expected_id)
            self.assertIsInstance(obj, TelescopeType)
            self.assertEqual(expected_id, obj.id)
            self.assertEqual(name, obj.name)
            self.assertEqual(dt_utc, obj.created)
            self.assertEqual(dt_utc, obj.modified)

    def test_get_telescope_types(self):
        """Test case for get_telescope_types

        Get a list of TelescopeType objects  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType objects
            names = ['ONIX Telescope', 'JSTOR Telescope', 'Google Analytics Telescope']
            dt = pendulum.datetime.now(self.timezone)
            dt_utc = dt.in_tz(tz='UTC')
            for name in names:
                self.env.session.add(orm.TelescopeType(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that TelescopeType objects returned
            objects = self.api.get_telescope_types(limit=10)
            self.assertEqual(len(names), len(objects))
            for i, (obj, name) in enumerate(zip(objects, names)):
                expected_id = i + 1
                self.assertIsInstance(obj, TelescopeType)
                self.assertEqual(expected_id, obj.id)
                self.assertEqual(name, obj.name)
                self.assertEqual(dt_utc, obj.created)
                self.assertEqual(dt_utc, obj.modified)

    def test_get_telescopes(self):
        """Test case for get_telescopes

        Get a list of Telescope objects  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType objects
            names = ['ONIX Telescope', 'JSTOR Telescope', 'Google Analytics Telescope']
            dt = pendulum.datetime.now(self.timezone)
            for name in names:
                self.env.session.add(orm.TelescopeType(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Add Organisations
            names = ['Curtin University', 'Massachusetts Institute of Technology']
            for name in names:
                self.env.session.add(orm.Organisation(name=name, created=dt, modified=dt))
            self.env.session.commit()

            # Add Telescopes
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(
                orm.Telescope(organisation={'id': 1}, telescope_type={'id': 1}, created=dt, modified=dt))
            self.env.session.add(
                orm.Telescope(organisation={'id': 1}, telescope_type={'id': 2}, created=dt, modified=dt))
            self.env.session.add(
                orm.Telescope(organisation={'id': 2}, telescope_type={'id': 1}, created=dt, modified=dt))
            self.env.session.commit()

            # Assert that all Telescope objects returned
            objects = self.api.get_telescopes(limit=10)
            self.assertEqual(3, len(objects))

            # Assert that Organisation 1 Telescope objects returned
            objects = self.api.get_telescopes(organisation_id=1, limit=10)
            self.assertEqual(2, len(objects))

            # Assert that Organisation 2 Telescope objects returned
            objects = self.api.get_telescopes(organisation_id=2, limit=10)
            self.assertEqual(1, len(objects))

            # Assert that TelescopeType 1 Telescope objects returned
            objects = self.api.get_telescopes(telescope_type_id=1, limit=10)
            self.assertEqual(2, len(objects))

            # Assert that TelescopeType 2 Telescope objects returned
            objects = self.api.get_telescopes(telescope_type_id=2, limit=10)
            self.assertEqual(1, len(objects))

    def test_post_organisation(self):
        """Test case for post_organisation

        create an Organisation  # noqa: E501
        """

        with self.env.create():
            # Post telescope
            expected_id = 1
            obj = Organisation(name='Curtin University')
            result = self.api.post_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)

    def test_post_telescope(self):
        """Test case for post_telescope

        create a Telescope  # noqa: E501
        """

        with self.env.create():
            # Add TelescopeType and Organisation
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.commit()

            # Post telescope
            expected_id = 1
            obj = Telescope(organisation=Organisation(id=expected_id),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.post_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)

    def test_post_telescope_type(self):
        """Test case for post_telescope_type

        create a TelescopeType  # noqa: E501
        """

        with self.env.create():
            expected_id = 1
            obj = TelescopeType(name='ONIX Telescope')
            result = self.api.post_telescope_type(obj)

            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)

    def test_put_organisation(self):
        """Test case for put_organisation

        create or update an Organisation  # noqa: E501
        """

        with self.env.create():
            # Put create
            expected_id = 1
            name = 'Curtin University'
            obj = Organisation(name=name)
            result = self.api.put_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(name, result.name)

            # Put update
            new_name = 'Massachusetts Institute of Technology'
            obj = Organisation(id=expected_id, name=new_name)
            result = self.api.put_organisation(obj)
            self.assertIsInstance(result, Organisation)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(new_name, result.name)

            # Put not found
            with self.assertRaises(NotFoundException):
                self.api.put_organisation(Organisation(id=2, name=new_name))

    def test_put_telescope(self):
        """Test case for put_telescope

        create or update a Telescope  # noqa: E501
        """

        with self.env.create():
            expected_id = 1
            dt = pendulum.datetime.now(self.timezone)
            self.env.session.add(orm.TelescopeType(name='ONIX Telescope', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Curtin University', created=dt, modified=dt))
            self.env.session.add(orm.Organisation(name='Massachusetts Institute of Technology',
                                                  created=dt, modified=dt))
            self.env.session.commit()

            # Put create
            obj = Telescope(organisation=Organisation(id=expected_id),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.put_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)

            # Put update
            obj = Telescope(id=expected_id,
                            organisation=Organisation(id=2),
                            telescope_type=TelescopeType(id=expected_id))
            result = self.api.put_telescope(obj)
            self.assertIsInstance(result, Telescope)
            self.assertEqual(expected_id, result.id)
            self.assertEqual('Massachusetts Institute of Technology', result.organisation.name)

            # Put not found
            with self.assertRaises(NotFoundException):
                self.api.put_telescope(Telescope(id=2,
                                                 organisation=Organisation(id=expected_id),
                                                 telescope_type=TelescopeType(id=expected_id)))

    def test_put_telescope_type(self):
        """Test case for put_telescope_type

        create or update a TelescopeType  # noqa: E501
        """

        with self.env.create():
            # Put create
            expected_id = 1
            name = 'ONIX Telescope'
            obj = TelescopeType(name=name)
            result = self.api.put_telescope_type(obj)
            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(name, result.name)

            # Put update
            new_name = 'Google Analytics Telescope'
            obj = TelescopeType(id=expected_id, name=new_name)
            result = self.api.put_telescope_type(obj)
            self.assertIsInstance(result, TelescopeType)
            self.assertEqual(expected_id, result.id)
            self.assertEqual(new_name, result.name)

            # Put not found
            with self.assertRaises(NotFoundException):
                self.api.put_telescope_type(TelescopeType(id=2, name=new_name))

    def test_queryv1(self):
        """Test case for queryv1

        Search the Observatory API  # noqa: E501
        """

        self.api.queryv1()


if __name__ == '__main__':
    unittest.main()
